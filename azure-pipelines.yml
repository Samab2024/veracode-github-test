# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java
# This is an example of using VeraDemo Java test application with the Veracode Static Pipeline scanner.  A Veracode subscription is required.
trigger:
- main
pool:
  name: Default
steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'app/pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

# - task: Veracode@3
#   inputs:
#               ConnectionDetailsSelection: 'Service Connection'
#               AnalysisService: 'Veracode API'
#               veracodeAppProfile: 'New ADO'
#               # version: 'New ADO-$(build.buildNumber)-test'
#               filepath: 'app/target/verademo.war'
#               optargs: '-deleteincompletescan 2'
#               sandboxName: 'IF'
#               createProfile: true
#               createSandBox: true
#               failBuildIfUploadAndScanBuildStepFails: true
#               importResults: true
#               maximumWaitTime: '360'

- task: Veracode@3
  inputs:
    ConnectionDetailsSelection: 'Service Connection'
    AnalysisService: 'Veracode API'
    veracodeAppProfile: 'New ADO'
    version: '20240308.9'
    filepath: 'app/target/verademo.war'
    optargs: '-deleteincompletescan 2'
    importResults: true
    maximumWaitTime: '360'
    failBuildIfUploadAndScanBuildStepFails: false
    continueOnError: true 

- task: CmdLine@2
  inputs:
    script: |
      # here we get the link for the previous task logs
      previousTask=$(curl -s -X GET -H "Authorization: Bearer $(System.AccessToken)" -H "Content-Type: application/json" https://dev.azure.com/{organization}/{project}/_apis/build/builds/{buildId}/timeline/?api-version=5.1 | jq -r '.records[] | select(.name == "Veracode@3") | .log.url' )
      
      #put the logs in a file or you can simply grep on them
      curl -s -X GET -H "Authorization: Bearer $(System.AccessToken)" -H "Content-Type: application/json" "${previousTask}" | sed 's/^.*[0-9]Z //g' > $(System.DefaultWorkingDirectory)/log
      
      #grep on that file
      result=$(grep "already exists" $(System.DefaultWorkingDirectory)/log)
      echo $result
      if [ -z "$result" ]
      then
        echo "No expected error message!"
      else
        echo "##[warning]Build Already exist"
      fi